<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Flight.Interception</name>
    </assembly>
    <members>
        <member name="T:Flight.Interception.CodeGeneration.CodeGenerationContext">
            <summary>
            Interceptable proxy classes code generation context.
            </summary>
        </member>
        <member name="P:Flight.Interception.CodeGeneration.CodeGenerationContext.References">
            <summary>
            Gets the referenced assemblies.
            </summary>
            <value>
            The referenced assemblies.
            </value>
        </member>
        <member name="P:Flight.Interception.CodeGeneration.CodeGenerationContext.IndentLevel">
            <summary>Gets the indent level.</summary>
            <value>The indent level.</value>
        </member>
        <member name="P:Flight.Interception.CodeGeneration.CodeGenerationContext.SourceCode">
            <summary>
            Gets the generated source code.
            </summary>
            <value>
            The generated source code.
            </value>
        </member>
        <member name="M:Flight.Interception.CodeGeneration.CodeGenerationContext.WriteLines(System.String[])">
            <summary>Writes one or more lines of source code.</summary>
            <param name="lines">The source code to write.</param>
            <returns>The current <see cref="T:Flight.Interception.CodeGeneration.CodeGenerationContext"/></returns>
        </member>
        <member name="M:Flight.Interception.CodeGeneration.CodeGenerationContext.CodeBlock(System.String,System.String)">
            <summary>
            Create a code block with specified block mark.
            </summary>
            <param name="start">The start mark of the block, which is "{" by default.</param>
            <param name="end">The end mark of the block, which is "}" by default.</param>
            <returns>A <see cref="T:System.IDisposable"/> representing the code block.</returns>
        </member>
        <member name="M:Flight.Interception.CodeGeneration.CodeGenerationContext.Indent">
            <summary>
            Create an indent block.
            </summary>
            <returns>A <see cref="T:System.IDisposable"/> representing the indent block.</returns>
        </member>
        <member name="T:Flight.Interception.CodeGeneration.CodeGeneratorBase">
            <summary>
            The base class of concrete code generator classes.
            </summary>
        </member>
        <member name="M:Flight.Interception.CodeGeneration.CodeGeneratorBase.#ctor(System.Collections.Generic.IEnumerable{Flight.Interception.IInterceptorProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:Flight.Interception.CodeGeneration.CodeGeneratorBase"/> class.
            </summary>
            <param name="interceptorProviders">The interceptor providers.</param>
        </member>
        <member name="M:Flight.Interception.CodeGeneration.CodeGeneratorBase.RegisterProxyType(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor,System.Type[])">
            <summary>
            Registers the dynamically generated proxy types.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> holding all service registrations.</param>
            <param name="serviceDescriptor">The <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceDescriptor" /> representing original service registration.</param>
            <param name="proxyTypes">The dynamically generated interceptable proxy types.</param>
        </member>
        <member name="M:Flight.Interception.CodeGeneration.CodeGeneratorBase.TryGenerate(Microsoft.Extensions.DependencyInjection.ServiceDescriptor,Flight.Interception.CodeGeneration.CodeGenerationContext,System.String[]@)">
            <summary>
            Tries to generate source code of interceptable proxy class.
            </summary>
            <param name="serviceDescriptor">The <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceDescriptor" /> representing the raw service registration.</param>
            <param name="codeGenerationContext">The code generation context.</param>
            <param name="proxyTypeNames">The names of generated classes.</param>
            <returns>
            A <see cref="T:System.Boolean" /> value indicating whether generate class.
            </returns>
        </member>
        <member name="M:Flight.Interception.CodeGeneration.CodeGeneratorBase.Validate(System.Type)">
            <summary>
            Validates the specified type and make sure interceptors are all appled to valid methods and properties.
            </summary>
            <param name="type">The type to validate.</param>
        </member>
        <member name="M:Flight.Interception.CodeGeneration.CodeGeneratorBase.GenerateProperty(Flight.Interception.CodeGeneration.CodeGenerationContext,System.Reflection.PropertyInfo,System.String,System.String,System.String,System.String,System.String,System.String,System.Type)">
            <summary>
            Generates the property based source code.
            </summary>
            <param name="context">The code generation context.</param>
            <param name="property">The target property.</param>
            <param name="getContextClassName">Name of the get-method specific context class.</param>
            <param name="setContextClassName">Name of the set-method specific context class.</param>
            <param name="getMethodAccessor">The get-method accessor.</param>
            <param name="setMethodAccessor">The set-method accessor.</param>
            <param name="getInvokerFieldName">Name of the get-method specific invoker field.</param>
            <param name="setInvokerFieldName">Name of the set-method specific invoker field.</param>
            <param name="interface">The interface.</param>
        </member>
        <member name="M:Flight.Interception.CodeGeneration.CodeGeneratorBase.ResolveInvocationContextClassName(System.Reflection.MethodInfo)">
            <summary>
            Resolves the name of the invocation context class.
            </summary>
            <param name="method">The method to intercept.</param>
            <returns>The concrete intocation context class name.</returns>
        </member>
        <member name="M:Flight.Interception.CodeGeneration.CodeGeneratorBase.GetInterceptableProxyClassName(System.Type,System.Collections.Generic.List{System.String}@)">
            <summary>
            Gets the name of the generated interceptable proxy class.
            </summary>
            <param name="targetType">The target type.</param>
            <param name="typeConstraints">The type constraints.</param>
            <returns>The literal proxy type name.</returns>
        </member>
        <member name="T:Flight.Interception.CodeGeneration.GenericMethodMaker">
            <summary>
            Defines utility method to make generic method.
            </summary>
        </member>
        <member name="M:Flight.Interception.CodeGeneration.GenericMethodMaker.MakeGenericMethod``1(System.Reflection.MethodInfo)">
            <summary>
            Makes the generic method.
            </summary>
            <typeparam name="T">The 1st generic parameter type.</typeparam>
            <param name="definition">The generic method definition.</param>
            <returns>The made generic method.</returns>
        </member>
        <member name="M:Flight.Interception.CodeGeneration.GenericMethodMaker.MakeGenericMethod``2(System.Reflection.MethodInfo)">
            <summary>
            Makes the generic method.
            </summary>
            <typeparam name="T1">The type of the 1st generic parameter.</typeparam>
            <typeparam name="T2">The type of the 2nd generic parameter.</typeparam>
            <returns>The made generic method.</returns>
        </member>
        <member name="M:Flight.Interception.CodeGeneration.GenericMethodMaker.MakeGenericMethod``3(System.Reflection.MethodInfo)">
            <summary>
            Makes the generic method.
            </summary>
            <typeparam name="T1">The type of the 1st generic parameter.</typeparam>
            <typeparam name="T2">The type of the 2nd generic parameter.</typeparam>
            <typeparam name="T3">The type of the 3rd generic parameter.</typeparam>
            <returns>The made generic method.</returns>
        </member>
        <member name="M:Flight.Interception.CodeGeneration.GenericMethodMaker.MakeGenericMethod``4(System.Reflection.MethodInfo)">
            <summary>
            Makes the generic method.
            </summary>
            <typeparam name="T1">The type of the 1st generic parameter.</typeparam>
            <typeparam name="T2">The type of the 2nd generic parameter.</typeparam>
            <typeparam name="T3">The type of the 3rd generic parameter.</typeparam>
            <typeparam name="T4">The type of the 4th generic parameter.</typeparam>
            <returns>The made generic method.</returns>
        </member>
        <member name="M:Flight.Interception.CodeGeneration.GenericMethodMaker.MakeGenericMethod``5(System.Reflection.MethodInfo)">
            <summary>
            Makes the generic method.
            </summary>
            <typeparam name="T1">The type of the 1st generic parameter.</typeparam>
            <typeparam name="T2">The type of the 2nd generic parameter.</typeparam>
            <typeparam name="T3">The type of the 3rd generic parameter.</typeparam>
            <typeparam name="T4">The type of the 4th generic parameter.</typeparam>
            <typeparam name="T5">The type of the 5th generic parameter.</typeparam>
            <returns>The made generic method.</returns>
        </member>
        <member name="M:Flight.Interception.CodeGeneration.GenericMethodMaker.MakeGenericMethod``6(System.Reflection.MethodInfo)">
            <summary>
            Makes the generic method.
            </summary>
            <typeparam name="T1">The type of the 1st generic parameter.</typeparam>
            <typeparam name="T2">The type of the 2nd generic parameter.</typeparam>
            <typeparam name="T3">The type of the 3rd generic parameter.</typeparam>
            <typeparam name="T4">The type of the 4th generic parameter.</typeparam>
            <typeparam name="T5">The type of the 5th generic parameter.</typeparam>
            <typeparam name="T6">The type of the 6th generic parameter.</typeparam>
            <returns>The made generic method.</returns>
        </member>
        <member name="T:Flight.Interception.CodeGeneration.ICodeGenerator">
            <summary>
            Code generator to write interceptable class source code.
            </summary>
        </member>
        <member name="M:Flight.Interception.CodeGeneration.ICodeGenerator.TryGenerate(Microsoft.Extensions.DependencyInjection.ServiceDescriptor,Flight.Interception.CodeGeneration.CodeGenerationContext,System.String[]@)">
            <summary>
            Tries to generate source code of interceptable proxy class.
            </summary>
            <param name="serviceDescriptor">The <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceDescriptor"/> representing the raw service registration.</param>
            <param name="codeGenerationContext">The code generation context.</param>
            <param name="proxyTypeNames">The names of generated classes.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating whether generate class.</returns>
        </member>
        <member name="M:Flight.Interception.CodeGeneration.ICodeGenerator.RegisterProxyType(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor,System.Type[])">
            <summary>
            Registers the dynamically generated proxy types.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> holding all service registrations.</param>
            <param name="serviceDescriptor">The <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceDescriptor"/> representing original service registration.</param>
            <param name="proxyTypes">The dynamically generated interceptable proxy types.</param>
        </member>
        <member name="T:Flight.Interception.CodeGeneration.IInterfaceProxy">
            <summary>
            A maker interface which the generated interface based proxy classes implement.
            </summary>
        </member>
        <member name="T:Flight.Interception.CodeGeneration.IVirtualMethodProxy">
            <summary>
            A maker interface which the generated virtual based proxy classes implement.
            </summary>
        </member>
        <member name="T:Flight.Interception.CodeGeneration.IVirtualMethodProxyGenerator">
            <summary>
            Virtual method based code generator.
            </summary>
        </member>
        <member name="M:Flight.Interception.CodeGeneration.IVirtualMethodProxyGenerator.Generate(Flight.Interception.CodeGeneration.CodeGenerationContext,System.Type,System.Reflection.MethodInfo[])">
            <summary>
            Generates the interceptable proxy class.
            </summary>
            <param name="codeGenerationContext">The code generation context.</param>
            <param name="baseType">The base type.</param>
            <param name="interceptableMethods">The interceptable methods.</param>
            <returns>The source code of interceptable proxy class.</returns>
        </member>
        <member name="T:Flight.Interception.InterceptorAttribute">
            <summary>
            Attribute used to apply specified interceptor type to target methods.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Flight.Interception.InterceptorAttribute.Interceptor">
            <summary>
            Gets the interceptor type, the current type will be returned if not explicitly specified.
            </summary>
            <value>
            The interceptor type.
            </value>
        </member>
        <member name="P:Flight.Interception.InterceptorAttribute.Arguments">
            <summary>
            Gets the arguments passed to interceptor type's constructor when creating interceptor instance.
            </summary>
            <value>
            The arguments passed to interceptor type's constructor when creating interceptor instance.
            </value>
        </member>
        <member name="P:Flight.Interception.InterceptorAttribute.Order">
            <summary>
            Gets or sets the order, which determines the target interceptor's position in the interceptor pipeline.
            </summary>
            <value>
            The order, which determines the target interceptor's position in the interceptor pipeline.
            </value>
        </member>
        <member name="M:Flight.Interception.InterceptorAttribute.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Flight.Interception.InterceptorAttribute"/> class.
            </summary>
            <param name="arguments">The arguments passed to interceptor type's constructor when creating interceptor instance.</param>
        </member>
        <member name="M:Flight.Interception.InterceptorAttribute.#ctor(System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Flight.Interception.InterceptorAttribute"/> class.
            </summary>
            <param name="interceptor">The  interceptor type.</param>
            <param name="arguments">The arguments passed to interceptor type's constructor when creating interceptor instance.</param>
        </member>
        <member name="T:Flight.Interception.NonInterceptableAttribute">
            <summary>
            Attribute used for interception suppression.
            </summary>
        </member>
        <member name="T:Flight.Interception.Expressions.IInterceptorRegistry`1">
            <summary>
            A registry used to register interceptors.
            </summary>
            <typeparam name="TInterceptor">The type of the interceptor.</typeparam>
        </member>
        <member name="M:Flight.Interception.Expressions.IInterceptorRegistry`1.ToMethod``1(System.Int32,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Applies specified interceptor to target method.
            </summary>
            <typeparam name="TTarget">The type of target method to which the interceptor is applied.</typeparam>
            <param name="order">The order determining the specified interceptor in chain.</param>
            <param name="methodCall">The expression to call the target method.</param>
            <returns>The current <see cref="T:Flight.Interception.Expressions.IInterceptorRegistry`1"/></returns>
        </member>
        <member name="M:Flight.Interception.Expressions.IInterceptorRegistry`1.ToMethod(System.Int32,System.Reflection.MethodInfo)">
            <summary>
            Applies specified interceptor to target method.
            </summary>
            <param name="order">The order determining the specified interceptor in chain.</param>
            <param name="method">The target method to which specified interceptor is applied.</param>
            <returns>The current <see cref="T:Flight.Interception.Expressions.IInterceptorRegistry`1"/></returns>
        </member>
        <member name="M:Flight.Interception.Expressions.IInterceptorRegistry`1.ToGetMethod``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Applies specified interceptor to target property's get-method.
            </summary>
            <typeparam name="TTarget">The type of target property to which the interceptor is applied.</typeparam>
            <param name="order">The order.</param>
            <param name="propertyAccessor">The expression to access the target.</param>
            <returns>The current <see cref="T:Flight.Interception.Expressions.IInterceptorRegistry`1"/></returns>
        </member>
        <member name="M:Flight.Interception.Expressions.IInterceptorRegistry`1.ToSetMethod``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Applies specified interceptor to target property's set-method.
            </summary>
            <typeparam name="TTarget">The type of target property to which the interceptor is applied.</typeparam>
            <param name="order">The order.</param>
            <param name="propertyAccessor">The expression to access the target.</param>
            <returns>The current <see cref="T:Flight.Interception.Expressions.IInterceptorRegistry`1"/></returns>
        </member>
        <member name="M:Flight.Interception.Expressions.IInterceptorRegistry`1.ToProperty``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Applies specified interceptor to target property's set-method and get-method.
            </summary>
            <typeparam name="TTarget">The type of target property to which the interceptor is applied.</typeparam>
            <param name="order">The order.</param>
            <param name="propertyAccessor">The expression to access the target.</param>
            <returns>The current <see cref="T:Flight.Interception.Expressions.IInterceptorRegistry`1"/></returns>
        </member>
        <member name="T:Flight.Interception.IInterceptorRegistry">
            <summary>
            Expression based intercepter registry.
            </summary>
        </member>
        <member name="M:Flight.Interception.IInterceptorRegistry.For``1(System.Object[])">
            <summary>
            Create a <see cref="T:Flight.Interception.Expressions.IInterceptorRegistry`1"/> to register specified interceptor type.
            </summary>
            <typeparam name="TInterceptor">The type of the interceptor to register.</typeparam>
            <param name="arguments">The arguments passed to interceptor constructor.</param>
            <returns>The <see cref="T:Flight.Interception.Expressions.IInterceptorRegistry`1"/>.</returns>
        </member>
        <member name="M:Flight.Interception.IInterceptorRegistry.SupressType``1">
            <summary>
            Supresses the type to be intercepted.
            </summary>
            <typeparam name="TTarget">The type to be suppressed.</typeparam>
            <returns>The current <see cref="T:Flight.Interception.IInterceptorRegistry"/>.</returns>
        </member>
        <member name="M:Flight.Interception.IInterceptorRegistry.SupressTypes(System.Type[])">
            <summary>
            Supresses the types to be intercepted.
            </summary>
            <param name="types">The suprressed methods.</param>
            <returns>The current <see cref="T:Flight.Interception.IInterceptorRegistry"/>.</returns>
        </member>
        <member name="M:Flight.Interception.IInterceptorRegistry.SupressMethod``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>Supresses the method to be intercepted.</summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="methodCall">The method call expression against to the suprressed method.</param>
            <returns>The current <see cref="T:Flight.Interception.IInterceptorRegistry"/>.</returns>
        </member>
        <member name="M:Flight.Interception.IInterceptorRegistry.SupressMethods(System.Reflection.MethodInfo[])">
            <summary>Supresses the methods to be intercepted.</summary>
            <param name="methods">The suprressed methods.</param>
            <returns>The current <see cref="T:Flight.Interception.IInterceptorRegistry"/>.</returns>
        </member>
        <member name="M:Flight.Interception.IInterceptorRegistry.SupressProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Supresses the property to be suppressed.
            </summary>
            <typeparam name="TTarget">The type whose property is suppressed.</typeparam>
            <param name="propertyAccessor">The property access expression against the suppressed property.</param>
            <returns>The current <see cref="T:Flight.Interception.IInterceptorRegistry"/>.</returns>
        </member>
        <member name="M:Flight.Interception.IInterceptorRegistry.SupressSetMethod``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Supresses the set method of property to be suppressed.
            </summary>
            <typeparam name="TTarget">The type whose property is suppressed.</typeparam>
            <param name="propertyAccessor">The property access expression against the suppressed property.</param>
            <returns>The current <see cref="T:Flight.Interception.IInterceptorRegistry"/>.</returns>
        </member>
        <member name="M:Flight.Interception.IInterceptorRegistry.SupressGetMethod``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Supresses the get method of property to be suppressed.
            </summary>
            <typeparam name="TTarget">The type whose property is suppressed.</typeparam>
            <param name="propertyAccessor">The property access expression against the suppressed property.</param>
            <returns>The current <see cref="T:Flight.Interception.IInterceptorRegistry"/>.</returns>
        </member>
        <member name="T:Flight.Interception.IApplicationServicesAccessor">
            <summary>
            Accessor to get application based <see cref="T:System.IServiceProvider"/>.
            </summary>
        </member>
        <member name="P:Flight.Interception.IApplicationServicesAccessor.ApplicationServices">
            <summary>
            Gets the application based <see cref="T:System.IServiceProvider"/>.
            </summary>
            <value>
            The application based <see cref="T:System.IServiceProvider"/>.
            </value>
        </member>
        <member name="T:Flight.Interception.IConventionalInterceptorFactory">
            <summary>
            Factory to create interceptor based on specified type and optional arguments.
            </summary>
        </member>
        <member name="M:Flight.Interception.IConventionalInterceptorFactory.CreateInterceptor(System.Type,System.Object[])">
            <summary>
            Creates the interceptor based <see cref="T:Flight.Interception.InvokeDelegate"/>.
            </summary>
            <param name="interceptorType">Type of the interceptor based <see cref="T:Flight.Interception.InvokeDelegate"/>.</param>
            <param name="arguments">The arguments passed to constructor.</param>
            <returns>The created interceptor based <see cref="T:Flight.Interception.InvokeDelegate"/>.</returns>
        </member>
        <member name="T:Flight.Interception.IInterceptorProvider">
            <summary>
            Provider to get the interceptors applied specified method.
            </summary>
        </member>
        <member name="M:Flight.Interception.IInterceptorProvider.GetInterceptors(System.Reflection.MethodInfo)">
            <summary>
            Gets the interceptors applied specified method.
            </summary>
            <param name="method">The target method.</param>
            <returns>The <see cref="T:Flight.Interception.Sortable`1"/> represents the applied interceptors.</returns>
        </member>
        <member name="M:Flight.Interception.IInterceptorProvider.IsInterceptionSuppressed(System.Reflection.MethodInfo)">
            <summary>
            Determines whether to suppress interception against specified method.
            </summary>
            <param name="method">The target method.</param>
            <returns>The <see cref="T:System.Boolean"/>value indicating whether to suppress interception against specified method.</returns>
        </member>
        <member name="M:Flight.Interception.IInterceptorProvider.Validate(System.Type,System.Action{System.Reflection.MethodInfo},System.Action{System.Reflection.PropertyInfo})">
            <summary>
            Validates and ensure interceptors are applied to approriate members of specified type.
            </summary>
            <param name="methodValidator">A delegate used to ensure the method to which the interceptors are applied is interceptable.</param>
            <param name="propertyValidator">A delegate used to ensure the property to which the interceptors are applied is interceptable.</param>
            <param name="type">The type whose methods may be intercepted.</param>
        </member>
        <member name="T:Flight.Interception.IInvocationServiceScopeFactory">
            <summary>
            Factory to create method invocation based service scope.
            </summary>
        </member>
        <member name="M:Flight.Interception.IInvocationServiceScopeFactory.CreateInvocationScope">
            <summary>
            Creates method invocation based service scope.
            </summary>
            <returns>The created method invocation based service scope.</returns>
        </member>
        <member name="T:Flight.Interception.IMethodInvokerBuilder">
            <summary>
            Builder used to build the invoker based on specified target method call.
            </summary>
        </member>
        <member name="M:Flight.Interception.IMethodInvokerBuilder.Build(System.Reflection.MethodInfo,Flight.Interception.InvokeDelegate)">
            <summary>
            Builds the invoker based on specified target method call.
            </summary>
            <param name="method">The target method.</param>
            <param name="targetMethodInvoker">The target method call.</param>
            <returns>The created <see cref="T:Flight.Interception.InvokeDelegate"/> used to call the applied interceptor chain and target method. </returns>
        </member>
        <member name="M:Flight.Interception.IMethodInvokerBuilder.CanIntercept(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified type is interceptable.
            </summary>
            <param name="method">The target method.</param>
            <returns>
              <c>true</c> if the specified type is interceptable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Flight.Interception.InterceptionException">
            <summary>
            Interception based exception.
            </summary>
        </member>
        <member name="M:Flight.Interception.InterceptionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Flight.Interception.InterceptionException"/> class.
            </summary>
        </member>
        <member name="M:Flight.Interception.InterceptionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flight.Interception.InterceptionException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Flight.Interception.InterceptionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Flight.Interception.InterceptionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Flight.Interception.InterceptionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Flight.Interception.InterceptionException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Flight.Interception.InterceptionOptions">
            <summary>
            Interception based options.
            </summary>
        </member>
        <member name="P:Flight.Interception.InterceptionOptions.InterceptorRegistrations">
            <summary>
            Gets or sets the interceptor registrations.
            </summary>
            <value>
            The interceptor registrations.
            </value>
        </member>
        <member name="T:Flight.Interception.InvocationContext">
            <summary>
            Method invocation context.
            </summary>
        </member>
        <member name="P:Flight.Interception.InvocationContext.Target">
            <summary>
            Gets the target instance the method is finally called against.
            </summary>
            <value>
            The target instance the method is finally called against.
            </value>
        </member>
        <member name="P:Flight.Interception.InvocationContext.MethodInfo">
            <summary>
            Gets the <see cref="P:Flight.Interception.InvocationContext.MethodInfo"/> representing the target method.
            </summary>
            <value>
            The <see cref="P:Flight.Interception.InvocationContext.MethodInfo"/> representing the target method.
            </value>
        </member>
        <member name="P:Flight.Interception.InvocationContext.InvocationServices">
            <summary>
            Gets the method invocation scope based <see cref="T:System.IServiceProvider"/>.
            </summary>
            <value>
            The method invocation scope based <see cref="T:System.IServiceProvider"/>.
            </value>
        </member>
        <member name="M:Flight.Interception.InvocationContext.GetArgument``1(System.String)">
            <summary>
            Gets the argument value based on specified name.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="name">The parameter name.</param>
            <returns>The argument value.</returns>
        </member>
        <member name="M:Flight.Interception.InvocationContext.GetArgument``1(System.Int32)">
            <summary>
            Gets the argument value based on specified name.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="index">The parameter index (zero-based position).</param>
            <returns>The argument value.</returns>
        </member>
        <member name="M:Flight.Interception.InvocationContext.SetArgument``1(System.String,``0)">
            <summary>
            Sets the argument value.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="name">The parameter name.</param>
            <param name="value">The argument value.</param>
            <returns>The current <see cref="T:Flight.Interception.InvocationContext"/>.</returns>
        </member>
        <member name="M:Flight.Interception.InvocationContext.SetArgument``1(System.Int32,``0)">
            <summary>
            Sets the argument value.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="index">The parameter index (zero-based position).</param>
            <param name="value">The argument value.</param>
            <returns>The current <see cref="T:Flight.Interception.InvocationContext"/>.</returns>
        </member>
        <member name="M:Flight.Interception.InvocationContext.GetReturnValue``1">
            <summary>
            Gets the return value of method invocation.
            </summary>
            <typeparam name="TReturnValue">The type of the return value.</typeparam>
            <returns>The return value of method invocation.</returns>
        </member>
        <member name="M:Flight.Interception.InvocationContext.SetReturnValue``1(``0)">
            <summary>
            Sets the return value.
            </summary>
            <typeparam name="TReturnValue">The type of the return value.</typeparam>
            <param name="value">The return value of method invocation.</param>
            <returns>The current <see cref="T:Flight.Interception.InvocationContext"/>.</returns>
        </member>
        <member name="P:Flight.Interception.InvocationContext.Next">
            <summary>
            Gets or sets the <see cref="T:Flight.Interception.InvokeDelegate"/> used to invoke the next interceptor or target method.
            </summary>
            <value>
            The <see cref="T:Flight.Interception.InvokeDelegate"/> used to invoke the next interceptor or target method.
            </value>
        </member>
        <member name="M:Flight.Interception.InvocationContext.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Flight.Interception.InvocationContext"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Flight.Interception.InvocationContext.ProceedAsync">
            <summary>
            Call the next interceptor or target method.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.ValueTask"/> to call the next interceptor or target method.</returns>
        </member>
        <member name="T:Flight.Interception.InvokeDelegate">
            <summary>
            Method invocation delegate.
            </summary>
            <param name="context">The method invocation context.</param>
            <returns>The <see cref="T:System.Threading.Tasks.ValueTask"/> to perpform method invocation.</returns>
        </member>
        <member name="T:Flight.Interception.IServiceLifetimeProvider">
            <summary>
            Provider to get service life time.
            </summary>
        </member>
        <member name="M:Flight.Interception.IServiceLifetimeProvider.GetLifetime(System.Type)">
            <summary>
            Gets the lifetime of specified type based service registration.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns>The life time of the conrresponding service registration.</returns>
        </member>
        <member name="T:Flight.Interception.MemberUtilities">
            <summary>
            Utility class used to get specified type's member.
            </summary>
        </member>
        <member name="M:Flight.Interception.MemberUtilities.GetMethod(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> based on specified method call expression.
            </summary>
            <param name="methodCallExpression">The method call expression.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:Flight.Interception.MemberUtilities.GetMethod``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> based on specified method call expression.
            </summary>
            <typeparam name="T">The type of target instance the method is called against.</typeparam>
            <param name="methodCallExpression">The method call expression.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:Flight.Interception.MemberUtilities.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> based on specified property access expression.
            </summary>
            <typeparam name="TTarget">The type of target instance the method is called against.</typeparam>
            <param name="propertyAccessExpression">The property access expression.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:Flight.Interception.MemberUtilities.IsInterfaceOrVirtualMethod(System.Reflection.MethodInfo)">
            <summary>
            Determines whether [is interface or virtual method] [the specified method].
            </summary>
            <param name="method">The method.</param>
            <returns>
              <c>true</c> if [is interface or virtual method] [the specified method]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Flight.Interception.MemberUtilities.TryGetProperty(System.Reflection.MethodInfo,System.Reflection.PropertyInfo@)">
            <summary>
            Tries get the method specific property.
            </summary>
            <param name="method">The method.</param>
            <param name="propertyInfo">The<see cref="T:System.Reflection.PropertyInfo"/> whost get/set method is the specified method.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating if property exists.</returns>
        </member>
        <member name="T:Flight.Interception.MethodInvokerBuilder">
            <summary>
            A facade class used to get current <see cref="T:Flight.Interception.IMethodInvokerBuilder"/>.
            </summary>
        </member>
        <member name="P:Flight.Interception.MethodInvokerBuilder.Instance">
            <summary>
            Gets the current <see cref="T:Flight.Interception.IMethodInvokerBuilder"/>..
            </summary>
            <value>
            The current <see cref="T:Flight.Interception.IMethodInvokerBuilder"/>.
            </value>
        </member>
        <member name="T:Flight.Interception.ProxyHelper">
            <summary>
            The helper class used by dynamically generated interceptable proxy class.
            </summary>
        </member>
        <member name="M:Flight.Interception.ProxyHelper.GetArgumentOrReturnValue``2(``0)">
            <summary>
            Gets the argument or return value.
            </summary>
            <typeparam name="TAugument">The type of the augument.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="value">The value.</param>
            <returns>The argument or return value.</returns>
        </member>
        <member name="M:Flight.Interception.ProxyHelper.SetArgumentOrReturnValue``3(``0,``2,System.Action{``0,``1})">
            <summary>
            Sets the argument or return value.
            </summary>
            <typeparam name="TInvocationContext">The type of the method invocation context.</typeparam>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <typeparam name="TInput">The type of the input.</typeparam>
            <param name="context">The method invocation context.</param>
            <param name="value">The argument or return value.</param>
            <param name="evaluate">The delegate to evaluate the raw argument or return value.</param>
            <returns>The specified methond invocation context.</returns>
        </member>
        <member name="M:Flight.Interception.ProxyHelper.GetMethodInfo``1(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> based on its metadata token.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="metadataToken">The metadata token of the <see cref="T:System.Reflection.MethodInfo"/> to get.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> identified by specified metadata token.</returns>
        </member>
        <member name="M:Flight.Interception.ProxyHelper.AsValueTask``1(System.Threading.Tasks.ValueTask{``0})">
            <summary>
            Converts specified <see cref="T:System.Threading.Tasks.ValueTask`1"/> as <see cref="T:System.Threading.Tasks.ValueTask"/>.
            </summary>
            <typeparam name="TResult">The type of the result of specified <see cref="T:System.Threading.Tasks.ValueTask`1"/>.</typeparam>
            <param name="valueTask">The <see cref="T:System.Threading.Tasks.ValueTask`1"/> to convert.</param>
            <returns>The converted <see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="T:Flight.Interception.Sortable`1">
            <summary>
            Wrapper of specified type of item for sorting.
            </summary>
        </member>
        <member name="P:Flight.Interception.Sortable`1.Order">
            <summary>
            Gets the order used for sorting.
            </summary>
            <value>
            The order used for sorting..
            </value>
        </member>
        <member name="P:Flight.Interception.Sortable`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:Flight.Interception.Sortable`1.#ctor(System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Flight.Interception.Sortable`1"/> class.
            </summary>
            <param name="order">The order.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.InterceptableContainerBuilder">
            <summary>
            A builder used to build interceptable <see cref="T:System.IServiceProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.InterceptableContainerBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceProviderOptions,System.Action{Microsoft.Extensions.DependencyInjection.InterceptionBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.DependencyInjection.InterceptableContainerBuilder"/> class.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> containing the orginal service registrations.</param>
            <param name="serviceProviderOptions">The options for configuring various behaviors of the default <see cref="T:System.IServiceProvider"/> implementation.</param>
            <param name="setup">The <see cref="T:System.Action`1"/> used for advanced servide registration.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.InterceptableContainerBuilder.CreateServiceProvider">
            <summary>
            Creates the service provider.
            </summary>
            <returns>The created <see cref="T:System.IServiceProvider"/>.</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.InterceptionBuilder">
            <summary>
            A builder used to register interception based services.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.InterceptionBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.DependencyInjection.InterceptionBuilder"/> class.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> containing all service registrations.</param>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.InterceptionBuilder.Services">
            <summary>
            Gets <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> containing all service registrations.
            </summary>
            <value>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> containing all service registrations.
            </value>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.InterceptionBuilderExtensions">
            <summary>
            Defines InterceptionBuilder based extension methods.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.InterceptionBuilderExtensions.RegisterInterceptors(Microsoft.Extensions.DependencyInjection.InterceptionBuilder,System.Action{Flight.Interception.IInterceptorRegistry})">
            <summary>
            Registers the interceptors.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.InterceptionBuilder"/>.</param>
            <param name="register">The <see cref="T:System.Action`1"/> used to register interceptors.</param>
            <returns>The current <see cref="T:Microsoft.Extensions.DependencyInjection.InterceptionBuilder"/></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            Defines extension methods to register interception based services.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddInterception(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.InterceptionBuilder})">
            <summary>
            Adds the interception based services.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> containg all service registrations.</param>
            <param name="setup">The <see cref="T:System.Action`1"/> used to advanced service registering.</param>
            <returns>The passed <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.BuildInterceptableServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.InterceptionBuilder})">
            <summary>
            Builds the interceptable <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> containg all service registrations.</param>
            <param name="setup">The setup.</param>
            <returns>The built interceptable <see cref="T:System.IServiceProvider"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.BuildInterceptableServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceProviderOptions,System.Action{Microsoft.Extensions.DependencyInjection.InterceptionBuilder})">
            <summary>
            Builds the interceptable <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> containg all service registrations.</param>
            <param name="setup">The setup.</param>
            <param name="serviceProviderOptions">The options for configuring various behaviors of the default <see cref="T:System.IServiceProvider"/> implementation.</param>
            <returns>The built interceptable <see cref="T:System.IServiceProvider"/>.</returns>
        </member>
    </members>
</doc>
